# -*- coding: utf-8 -*-
"""nps_index_cli.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xw8MIfc9HyiCHFTXOtr5Z63czh_WCs8F
"""

from typing import List, Tuple

def nps_from_counts(counts: List[int]) -> float:
    detr = sum(counts[:3])
    prom = counts[4]
    total = sum(counts)
    if total == 0:
        return 0.0
    return 100.0 * ((prom - detr) / total)

def weighted_index(geral: List[int], cons: List[int], entr: List[int]) -> float:
    return (0.50 * nps_from_counts(geral)
          + 0.25 * nps_from_counts(cons)
          + 0.25 * nps_from_counts(entr))

def parse_line(line: str) -> Tuple[List[int], List[int], List[int]]:
    vals = [int(x) for x in line.replace(",", " ").split()]
    if len(vals) != 15:
        raise ValueError("Forneça os 15 números (5 de cada bloco).")
    geral = vals[0:5]
    cons  = vals[5:10]
    entr  = vals[10:15]
    return geral, cons, entr

def five_star_needed_all_blocks(geral: List[int], cons: List[int], entr: List[int],
                                target_index: float) -> int:
    x = 0
    g5, c5, e5 = geral[4], cons[4], entr[4]
    while weighted_index([*geral[:4], g5 + x],
                         [*cons[:4],  c5 + x],
                         [*entr[:4],  e5 + x]) < target_index:
        x += 1
    return x

def main():
    seg = input("Segmento (VN = Vendas, PV = Pós-Vendas): ").strip().upper()
    if seg not in {"VN", "PV"}:
        print("Entrada inválida. Use 'VN' ou 'PV'.")
        return
    target = 91.0 if seg == "VN" else 85.0
    print(f"\nSegmento fixado: {seg} | Meta do NPS INDEX: {target:.2f}%\n")
    print("Cole as 15 contagens (ou 'q' para sair):")
    print("Ex.: 1 1 10 10 100  1 1 10 10 100  1 1 10 10 100\n")

    while True:
        print("Nova Simulação:")
        line = input("> ").strip()
        if line.lower() in {"q", "quit", "exit"}:
            break
        try:
            geral, cons, entr = parse_line(line)
        except Exception as e:
            print(f"Entrada inválida: {e}\n")
            continue

        idx = weighted_index(geral, cons, entr)
        tot_g, tot_c, tot_e = sum(geral), sum(cons), sum(entr)
        if not (tot_g == tot_c == tot_e):
            print("[Aviso] Totais por bloco diferem (Geral, Consultor, Entrega). Base possivelmente distinta.")

        x = five_star_needed_all_blocks(geral, cons, entr, target)
        new_idx = weighted_index([*geral[:4], geral[4] + x],
                                 [*cons[:4],  cons[4]  + x],
                                 [*entr[:4],  entr[4]  + x])

        print("\n========== RESULTADOS ==========")
        print(f"NPS INDEX atual: {idx:6.2f}%")
        print("--------------------------------")
        print(f"Novos questionários 5⭐ necessários: {x}")
        print(f"NPS INDEX após +{x} respostas 5⭐: {new_idx:.2f}%")
        print("================================\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nEncerrado pelo usuário.")



